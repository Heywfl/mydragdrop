'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _csjs = require('csjs');

var _csjs2 = _interopRequireDefault(_csjs);

var _button = require('./styles/button');

var _button2 = _interopRequireDefault(_button);

var _insertCss = require('insert-css');

var _insertCss2 = _interopRequireDefault(_insertCss);

var _lodash = require('lodash.kebabCase');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(0, _insertCss2.default)(_csjs2.default.getCss(_button2.default), { prepend: true });

var Button = function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Button).apply(this, arguments));
  }

  _createClass(Button, [{
    key: 'createClassName',
    value: function createClassName() {
      return [_button2.default.button, _button2.default[(0, _lodash2.default)(this.props.size)], _button2.default[(0, _lodash2.default)(this.props.color)], _button2.default[(0, _lodash2.default)(this.props.style)], _button2.default[(0, _lodash2.default)(this.props.state)], this.props.className].join(' ').trim();
    }
  }, {
    key: 'createIconSize',
    value: function createIconSize() {
      if (this.props.size === 'isLarge') return 'is-medium';
      if (this.props.size === 'isSmall') return 'is-small';
      return '';
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'button',
        {
          style: this.props.customStyle,
          className: this.createClassName(),
          onClick: this.props.onClick,
          onFocus: this.props.onFocus,
          onBlur: this.props.onBlur,
          onTouchStart: this.props.onTouchStart,
          onDoubleClick: this.props.onDoubleClick,
          type: this.props.type
        },
        this.props.icon ? _react2.default.createElement(
          'span',
          null,
          _react2.default.createElement(
            'span',
            { className: [_button2.default.icon, _button2.default[this.createIconSize()]].join(' ') },
            _react2.default.createElement('i', { className: [_button2.default.fa, this.props.icon].join(' ') })
          ),
          _react2.default.createElement(
            'span',
            { style: { lineHeight: this.props.size === 'isLarge' ? '32px' : 'auto' } },
            this.props.children
          )
        ) : this.props.children
      );
    }
  }]);

  return Button;
}(_react.Component);

Button.propTypes = {
  children: _react.PropTypes.string,
  className: _react.PropTypes.string,
  customStyle: _react.PropTypes.object,
  onClick: _react.PropTypes.func,
  onFocus: _react.PropTypes.func,
  onBlur: _react.PropTypes.func,
  onTouchStart: _react.PropTypes.func,
  onDoubleClick: _react.PropTypes.func,
  icon: _react.PropTypes.string,
  type: _react.PropTypes.string,
  size: _react.PropTypes.oneOf(['isSmall', 'isMedium', 'isLarge']),
  color: _react.PropTypes.oneOf(['isPrimary', 'isInfo', 'isSuccess', 'isWarning', 'isDanger', 'isLink']),
  style: _react.PropTypes.oneOf(['isOutlined', 'isInverted']),
  state: _react.PropTypes.oneOf(['isLoading', 'isActive', 'isDisabled'])
};
Button.defaultProps = {
  customStyle: {},
  onClick: function onClick() {
    return null;
  },
  onFocus: function onFocus() {
    return null;
  },
  onBlur: function onBlur() {
    return null;
  },
  onTouchStart: function onTouchStart() {
    return null;
  },
  onDoubleClick: function onDoubleClick() {
    return null;
  },
  className: '',
  isLoading: false,
  isActive: false
};
exports.default = Button;