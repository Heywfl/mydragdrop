'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _csjs = require('csjs');

var _csjs2 = _interopRequireDefault(_csjs);

var _form = require('../styles/form');

var _form2 = _interopRequireDefault(_form);

var _insertCss = require('insert-css');

var _insertCss2 = _interopRequireDefault(_insertCss);

var _lodash = require('lodash.kebabCase');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(0, _insertCss2.default)(_csjs2.default.getCss(_form2.default), { prepend: true });

var Input = function (_Component) {
  _inherits(Input, _Component);

  function Input() {
    _classCallCheck(this, Input);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Input).apply(this, arguments));
  }

  _createClass(Input, [{
    key: 'createControlClassName',
    value: function createControlClassName() {
      return [_form2.default.control, _form2.default[(0, _lodash2.default)(this.props.state)], this.props.icon ? _form2.default['has-icon'] : '',
      // Add has-icon-left class because can not user not: selector( csjs bug )
      this.props.hasIconRight ? _form2.default['has-icon-right'] : _form2.default['has-icon-left'], this.props.className].join(' ').trim();
    }
  }, {
    key: 'createInputClassName',
    value: function createInputClassName() {
      return [_form2.default.input, _form2.default[(0, _lodash2.default)(this.props.color)], _form2.default[(0, _lodash2.default)(this.props.size)]].join(' ').trim();
    }
  }, {
    key: 'renderHelp',
    value: function renderHelp() {
      if (!this.props.help) return null;
      return _react2.default.createElement(
        'span',
        { className: [_form2.default.help, _form2.default[(0, _lodash2.default)(this.props.help.color)]].join(' ') },
        this.props.help.text
      );
    }
  }, {
    key: 'renderForm',
    value: function renderForm() {
      return _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement('input', {
          className: this.createInputClassName(),
          type: this.props.type,
          placeholder: this.props.placeholder,
          defaultValue: this.props.defaultValue,
          value: this.props.value,
          onClick: this.props.onClick,
          onFocus: this.props.onFocus,
          onBlur: this.props.onBlur,
          onTouchStart: this.props.onTouchStart,
          onDoubleClick: this.props.onDoubleClick,
          onChange: this.props.onChange,
          disabled: this.props.state === 'isDisabled'
        }),
        _react2.default.createElement('i', { className: [_form2.default.fa, this.props.icon].join(' ') }),
        this.renderHelp()
      );
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.hasAddons) {
        return this.renderForm();
      }
      return _react2.default.createElement(
        'p',
        { className: this.createControlClassName(), style: this.props.customStyle },
        this.renderForm()
      );
    }
  }]);

  return Input;
}(_react.Component);

Input.propTypes = {
  className: _react.PropTypes.string,
  customStyle: _react.PropTypes.object,
  onClick: _react.PropTypes.func,
  onFocus: _react.PropTypes.func,
  onBlur: _react.PropTypes.func,
  onChange: _react.PropTypes.func,
  onTouchStart: _react.PropTypes.func,
  onDoubleClick: _react.PropTypes.func,
  hasIcon: _react.PropTypes.bool,
  hasIconRight: _react.PropTypes.bool,
  icon: _react.PropTypes.string,
  type: _react.PropTypes.string,
  placeholder: _react.PropTypes.string,
  defaultValue: _react.PropTypes.string,
  value: _react.PropTypes.string,
  hasAddons: _react.PropTypes.bool,
  color: _react.PropTypes.oneOf(['isPrimary', 'isInfo', 'isSuccess', 'isWarning', 'isDanger']),
  size: _react.PropTypes.oneOf(['isSmall', 'isMedium', 'isLarge']),
  state: _react.PropTypes.oneOf(['isLoading', 'isDisabled']),
  help: _react.PropTypes.shape({
    text: _react.PropTypes.string,
    color: _react.PropTypes.oneOf(['isPrimary', 'isInfo', 'isSuccess', 'isWarning', 'isDanger'])
  })
};
Input.defaultProps = {
  style: {},
  className: '',
  isLoading: false,
  isActive: false
};
exports.default = Input;